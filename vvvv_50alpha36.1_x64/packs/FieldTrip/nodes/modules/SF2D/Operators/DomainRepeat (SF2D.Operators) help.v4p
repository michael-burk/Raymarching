<!DOCTYPE PATCH  SYSTEM "http://vvvv.org/versions/vvvv50beta35.7.dtd" >
   <PATCH nodename="C:\Users\Kyle\Desktop\Dropbox\VVVV Files\vvvv_50beta35.7_x64\packs\FieldTrip\nodes\modules\Operators\DomainRepeat (SF2D.Operators) help.v4p">
   <BOUNDS type="Window" left="870" top="840" width="6540" height="8145">
   </BOUNDS>
   <NODE nodename="IOBox (String)" componentmode="InABox" id="3">
   <BOUNDS type="Node" left="225" top="225" width="5100" height="450">
   </BOUNDS>
   <BOUNDS type="Box" left="225" top="225" width="5100" height="450">
   </BOUNDS>
   <PIN pinname="Input String" slicecount="1" visible="0" values="|DomainRepeat (SF2D.Operators)|">
   </PIN>
   <PIN pinname="Output String" slicecount="1" visible="0" values="||">
   </PIN>
   <PIN pinname="Size" slicecount="1" visible="1" values="14">
   </PIN>
   </NODE>
   <NODE nodename="IOBox (String)" componentmode="InABox" id="2">
   <BOUNDS type="Node" left="225" top="600" width="5100" height="600">
   </BOUNDS>
   <BOUNDS type="Box" left="225" top="600" width="5100" height="600">
   </BOUNDS>
   <PIN pinname="Input String" slicecount="1" visible="0" values="|Cycles a 2D Scalar fieldâ€™s domain with various options|">
   </PIN>
   <PIN pinname="Output String" slicecount="1" visible="0" values="||">
   </PIN>
   </NODE>
   <NODE systemname="Renderer (DX11)" filename="%VVVV%\packs\dx11\nodes\plugins\VVVV.DX11.Nodes.dll" nodename="Renderer (DX11)" componentmode="InAWindow" id="21">
   <BOUNDS type="Node" left="2445" top="6900" width="100" height="100">
   </BOUNDS>
   <BOUNDS type="Box" left="2445" top="6900" width="6000" height="4500">
   </BOUNDS>
   <BOUNDS type="Window" left="7215" top="870" width="8445" height="8535">
   </BOUNDS>
   <PIN pinname="Layers" visible="1" slicecount="1" values="||">
   </PIN>
   </NODE>
   <NODE nodename="IOBox (Value Advanced)" componentmode="InABox" id="20" systemname="IOBox (Value Advanced)">
   <BOUNDS type="Box" left="3915" top="5865" width="480" height="480">
   </BOUNDS>
   <BOUNDS type="Node" left="3915" top="5865" width="0" height="0">
   </BOUNDS>
   <PIN pinname="Units" slicecount="1" values="||">
   </PIN>
   <PIN pinname="Precision" slicecount="1" values="4">
   </PIN>
   <PIN pinname="Value Type" slicecount="1" values="Boolean">
   </PIN>
   <PIN pinname="Behavior" slicecount="1" values="Toggle">
   </PIN>
   <PIN pinname="Y Input Value" visible="1" slicecount="1" values="1">
   </PIN>
   <PIN pinname="Descriptive Name" slicecount="1" values="Compiled">
   </PIN>
   </NODE>
   <NODE nodename="IOBox (Value Advanced)" componentmode="InABox" id="19">
   <BOUNDS type="Box" left="2910" top="3285" width="795" height="480">
   </BOUNDS>
   <BOUNDS type="Node" left="2910" top="3285" width="0" height="0">
   </BOUNDS>
   <PIN pinname="Y Input Value" slicecount="2" visible="1" values="0.32,0.32">
   </PIN>
   <PIN pinname="Units" slicecount="1" values="||">
   </PIN>
   <PIN pinname="Precision" slicecount="1" values="4">
   </PIN>
   <PIN pinname="Vector Size" slicecount="1" values="2">
   </PIN>
   <PIN pinname="Rows" slicecount="1" values="2">
   </PIN>
   <PIN pinname="Descriptive Name" slicecount="1" values="|Size XY|">
   </PIN>
   </NODE>
   <NODE nodename="IOBox (Value Advanced)" componentmode="InABox" id="18">
   <BOUNDS type="Box" left="1755" top="1215" width="795" height="480">
   </BOUNDS>
   <BOUNDS type="Node" left="1755" top="1215" width="0" height="0">
   </BOUNDS>
   <PIN pinname="Y Input Value" slicecount="2" visible="1" values="-0.02,-0.44">
   </PIN>
   <PIN pinname="Units" slicecount="1" values="||">
   </PIN>
   <PIN pinname="Precision" slicecount="1" values="4">
   </PIN>
   <PIN pinname="Vector Size" slicecount="1" values="2">
   </PIN>
   <PIN pinname="Rows" slicecount="1" values="2">
   </PIN>
   </NODE>
   <NODE nodename="IOBox (Value Advanced)" componentmode="InABox" id="17">
   <BOUNDS type="Box" left="2655" top="1215" width="795" height="480">
   </BOUNDS>
   <BOUNDS type="Node" left="2655" top="1215" width="0" height="0">
   </BOUNDS>
   <PIN pinname="Y Input Value" slicecount="2" visible="1" values="-0.3,0.07">
   </PIN>
   <PIN pinname="Units" slicecount="1" values="||">
   </PIN>
   <PIN pinname="Precision" slicecount="1" values="4">
   </PIN>
   <PIN pinname="Vector Size" slicecount="1" values="2">
   </PIN>
   <PIN pinname="Rows" slicecount="1" values="2">
   </PIN>
   <PIN pinname="Descriptive Name" slicecount="1" values="||">
   </PIN>
   </NODE>
   <NODE nodename="IOBox (Enumerations)" componentmode="InABox" id="16">
   <BOUNDS type="Box" left="4140" top="3480" width="1590" height="270">
   </BOUNDS>
   <BOUNDS type="Node" left="4140" top="3480" width="0" height="0">
   </BOUNDS>
   <PIN pinname="Input Enum" slicecount="1" visible="1" values="|Grid XY|">
   </PIN>
   <PIN pinname="Descriptive Name" slicecount="1" values="|Combination Operation|">
   </PIN>
   </NODE>
   <NODE nodename="IOBox (Value Advanced)" componentmode="InABox" id="15">
   <BOUNDS type="Box" left="900" top="1215" width="795" height="480">
   </BOUNDS>
   <BOUNDS type="Node" left="900" top="1215" width="0" height="0">
   </BOUNDS>
   <PIN pinname="Y Input Value" slicecount="2" visible="1" values="0.2,0">
   </PIN>
   <PIN pinname="Units" slicecount="1" values="||">
   </PIN>
   <PIN pinname="Precision" slicecount="1" values="4">
   </PIN>
   <PIN pinname="Vector Size" slicecount="1" values="2">
   </PIN>
   <PIN pinname="Rows" slicecount="1" values="2">
   </PIN>
   </NODE>
   <NODE nodename="IOBox (String)" componentmode="InABox" id="14">
   <BOUNDS type="Node" left="4065" top="2325" width="4650" height="270">
   </BOUNDS>
   <BOUNDS type="Box" left="4065" top="2325" width="1935" height="930">
   </BOUNDS>
   <PIN pinname="Input String" visible="0" slicecount="1" values="|Note Polar mode just uses the first value of Size for # of repeats|">
   </PIN>
   <PIN pinname="Output String" visible="0">
   </PIN>
   <PIN pinname="Show Grid" slicecount="1" values="0">
   </PIN>
   <PIN pinname="String Type" slicecount="1" values="MultiLine">
   </PIN>
   </NODE>
   <NODE systemname="DrawSDF (SF2D.Usages DX11.Layer)" filename="%VVVV%\packs\FieldTrip\nodes\modules\Usages\Render\DrawSDF (DX11.Layer SF2D)\DrawSDF (SF2D.Usages DX11.Layer).v4p" nodename="DrawSDF (SF2D.Usages DX11.Layer)" componentmode="Hidden" id="13">
   <BOUNDS type="Node" left="2640" top="5475" width="100" height="100">
   </BOUNDS>
   <PIN pinname="Function Resource Semantics" visible="1" slicecount="1" values="||">
   </PIN>
   <PIN pinname="SF2D Class" visible="1" slicecount="1" values="|&cr;&lf;#ifndef SDF_FXH&cr;&lf;#include &lt;packs\happy.fxh\sdf.fxh&gt;&cr;&lf;#endif&cr;&lf;&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;//&cr;&lf;//&tab;&tab;Circle Distance Function&cr;&lf;//&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;// This token will be replaced with function name via RegExpr: &quot;fCircleSDF_0_&quot;&cr;&lf;&cr;&lf;#ifndef SF2D&cr;&lf;// Paramaters&cr;&lf;StructuredBuffer&lt;float2&gt; fCircleSDF_0_pos : fCircleSDF_0_POS;&cr;&lf;StructuredBuffer&lt;float&gt; fCircleSDF_0_radius : fCircleSDF_0_RADIUS;&cr;&lf;&cr;&lf;uint circleCount;&cr;&lf;&cr;&lf;float fCircleSDF_0_ (float2 p)&cr;&lf;{&cr;&lf;&tab;float d = 999999;&cr;&lf;&tab;for(uint i; i&lt; circleCount; i++)&cr;&lf;&tab;{&cr;&lf;&tab;&tab;d = min (d, fCircle(p-fCircleSDF_0_pos[i], fCircleSDF_0_radius[i]));&lf;&tab;}&cr;&lf;&tab;return d;&cr;&lf;}&cr;&lf;&cr;&lf;&cr;&lf;#define SF2D fCircleSDF_0_&cr;&lf;#endif&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;|">
   </PIN>
   <PIN pinname="Layer" visible="1">
   </PIN>
   <PIN pinname="Technique Valid" visible="1">
   </PIN>
   <PIN pinname="Function Parameter Semantics" visible="1" slicecount="1" values="||">
   </PIN>
   <PIN pinname="SF2D Function" visible="1" slicecount="1" values="|&cr;&lf;#ifndef SDF_FXH&cr;&lf;#include &lt;packs\happy.fxh\sdf.fxh&gt;&cr;&lf;#endif&cr;&lf;&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;//&cr;&lf;//&tab;&tab;Circle Distance Function&cr;&lf;//&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;// This token will be replaced with function name via RegExpr: &quot;fBox2DSDF_0_&quot;&cr;&lf;&cr;&lf;#ifndef fDomainRepeatS2D_0_INPUT&cr;&lf;// Paramaters&cr;&lf;StructuredBuffer&lt;float2&gt; fBox2DSDF_0_pos : fBox2DSDF_0_POS;&cr;&lf;StructuredBuffer&lt;float2&gt; fBox2DSDF_0_size : fBox2DSDF_0_SIZE;&cr;&lf;&cr;&lf;int fBox2DSDF_0_count : fBox2DSDF_0_COUNT;&cr;&lf;&cr;&lf;float fBox2DSDF_0_ (float2 p)&cr;&lf;{&cr;&lf;&tab;float d = 999999;&cr;&lf;&tab;for(int i = 0; i&lt; fBox2DSDF_0_count; i++)&cr;&lf;&tab;{&cr;&lf;&tab;&tab;d = min (d, fBox(p-fBox2DSDF_0_pos[i], fBox2DSDF_0_size[i]));&lf;&tab;}&cr;&lf;&tab;return d;&cr;&lf;}&cr;&lf;&cr;&lf;&cr;&lf;#define fDomainRepeatS2D_0_INPUT fBox2DSDF_0_&cr;&lf;#endif&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;#ifndef CALC_FXH&cr;&lf;#include &lt;packs\happy.fxh\calc.fxh&gt;&cr;&lf;#endif&cr;&lf;&cr;&lf;#ifndef SDF_FXH&cr;&lf;#include &lt;packs\happy.fxh\sdf.fxh&gt;&cr;&lf;#endif&cr;&lf;&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;//&cr;&lf;//&tab;&tab;2D Domain Wraping Function&cr;&lf;//&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;// This token will be replaced with function name via RegExpr: &quot;fDomainRepeatS2D_0_&quot;&cr;&lf;#ifndef SF2D&cr;&lf;&cr;&lf;// Input function placeholder&cr;&lf;#ifndef fDomainRepeatS2D_0_INPUT&cr;&lf;#define fDomainRepeatS2D_0_INPUT placeHolderS2&cr;&lf;#endif&cr;&lf;&cr;&lf;&cr;&lf;// Paramaters&cr;&lf;float2 fDomainRepeatS2D_0_size : fDomainRepeatS2D_0_SIZE = 1;&cr;&lf;&cr;&lf;float fDomainRepeatS2D_0_ (float2 p)&cr;&lf;{&cr;&lf;&tab;p = pMod2(p, fDomainRepeatS2D_0_size);&cr;&lf;&tab;return fDomainRepeatS2D_0_INPUT(p);&cr;&lf;}&cr;&lf;&cr;&lf;#define SF2D fDomainRepeatS2D_0_&cr;&lf;#endif&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;|">
   </PIN>
   <PIN pinname="Color" slicecount="1" values="|0.10299,0.91844,0.55768,1.00000|">
   </PIN>
   <PIN pinname="Input SF2D Function" visible="1">
   </PIN>
   <PIN pinname="Compiled" visible="1">
   </PIN>
   <PIN pinname="Input" visible="1" slicecount="1" values="||">
   </PIN>
   </NODE>
   <LINK srcnodeid="13" srcpinname="Layer" dstnodeid="21" dstpinname="Layers">
   </LINK>
   <LINK srcnodeid="13" srcpinname="Compiled" dstnodeid="20" dstpinname="Y Input Value">
   </LINK>
   <NODE systemname="DomainRepeat (SF2D.Operators)" filename="%VVVV%\packs\FieldTrip\nodes\modules\Operators\DomainRepeat (SF2D.Operators).v4p" nodename="DomainRepeat (SF2D.Operators)" componentmode="Hidden" id="12">
   <BOUNDS type="Node" left="1065" top="4770" width="3810" height="270">
   </BOUNDS>
   <BOUNDS type="Window" left="4590" top="1710" width="19710" height="12255">
   </BOUNDS>
   <PIN pinname="Function Parameter Semantics" visible="1">
   </PIN>
   <PIN pinname="Input SF2D Function" visible="1">
   </PIN>
   <PIN pinname="SF2D Function" visible="1">
   </PIN>
   <PIN pinname="Size XY" slicecount="2" visible="1" values="0.71,0.71">
   </PIN>
   <PIN pinname="Combination Operation" slicecount="1" visible="1" values="|Mirror XY|">
   </PIN>
   <PIN pinname="Input" visible="1" slicecount="1" values="||">
   </PIN>
   <PIN pinname="Output" visible="1">
   </PIN>
   </NODE>
   <LINK srcnodeid="19" srcpinname="Y Output Value" dstnodeid="12" dstpinname="Size XY">
   </LINK>
   <LINK srcnodeid="16" srcpinname="Output Enum" dstnodeid="12" dstpinname="Combination Operation">
   </LINK>
   <LINK srcnodeid="12" srcpinname="SF2D Function" dstnodeid="13" dstpinname="SF2D Function">
   </LINK>
   <LINK srcnodeid="12" srcpinname="SF2D Function" dstnodeid="13" dstpinname="Input SF2D Function">
   </LINK>
   <NODE systemname="OutlineSDF (SF2D.Operators)" filename="%VVVV%\packs\FieldTrip\nodes\modules\SF2D\Operators\OutlineSDF (SF2D.Operators).v4p" nodename="OutlineSDF (SF2D.Operators)" componentmode="Hidden" id="11">
   <BOUNDS type="Node" left="1065" top="3000" width="100" height="100">
   </BOUNDS>
   <PIN pinname="Input SF2D Function" visible="1">
   </PIN>
   <PIN pinname="SF2D Function" visible="1">
   </PIN>
   <BOUNDS type="Window" left="-17205" top="5010" width="14670" height="12255">
   </BOUNDS>
   <PIN pinname="Function Parameter Semantics" visible="1">
   </PIN>
   <PIN pinname="Outline Width" slicecount="1" values="0.03">
   </PIN>
   <PIN pinname="Input" visible="1" slicecount="1" values="||">
   </PIN>
   <PIN pinname="Output" visible="1">
   </PIN>
   </NODE>
   <LINK srcnodeid="11" srcpinname="SF2D Function" dstnodeid="12" dstpinname="Input SF2D Function">
   </LINK>
   <NODE systemname="CombineSDF (SF2D.Operators)" filename="%VVVV%\packs\FieldTrip\nodes\modules\SF2D\Operators\CombineSDF (SF2D.Operators).v4p" nodename="CombineSDF (SF2D.Operators)" componentmode="Hidden" id="10">
   <BOUNDS type="Node" left="1035" top="2580" width="100" height="100">
   </BOUNDS>
   <PIN pinname="Input 2 SDF" visible="1" slicecount="1" values="||">
   </PIN>
   <PIN pinname="Input 1 SDF" visible="1" slicecount="1" values="||">
   </PIN>
   <PIN pinname="Output" visible="1">
   </PIN>
   <PIN pinname="Combination Parameter 1" slicecount="1" values="0.085">
   </PIN>
   </NODE>
   <LINK srcnodeid="10" srcpinname="Output" dstnodeid="11" dstpinname="Input">
   </LINK>
   <NODE systemname="TrianlgeSDF (SF2D.Sources)" filename="%VVVV%\packs\FieldTrip\nodes\modules\SF2D\Sources\TrianlgeSDF (SF2D.Sources).v4p" nodename="TrianlgeSDF (SF2D.Sources)" componentmode="Hidden" id="9">
   <BOUNDS type="Node" left="930" top="2070" width="100" height="100">
   </BOUNDS>
   <PIN pinname="SF2D Function" visible="1">
   </PIN>
   <PIN pinname="Function Parameter Semantics" visible="1">
   </PIN>
   <PIN pinname="Function Resource Semantics" visible="1">
   </PIN>
   <PIN pinname="C XY" slicecount="2" visible="1" values="0.5,0">
   </PIN>
   <PIN pinname="B XY" visible="1" slicecount="2" values="0,0.5">
   </PIN>
   <PIN pinname="A XY" slicecount="2" visible="1" values="-0.1,-0.1">
   </PIN>
   <PIN pinname="Output" visible="1">
   </PIN>
   </NODE>
   <LINK srcnodeid="18" srcpinname="Y Output Value" dstnodeid="9" dstpinname="B XY">
   </LINK>
   <LINK srcnodeid="17" srcpinname="Y Output Value" dstnodeid="9" dstpinname="C XY">
   </LINK>
   <LINK srcnodeid="15" srcpinname="Y Output Value" dstnodeid="9" dstpinname="A XY">
   </LINK>
   <LINK srcnodeid="9" srcpinname="Function Resource Semantics" dstnodeid="13" dstpinname="Function Resource Semantics">
   </LINK>
   <LINK srcnodeid="9" srcpinname="SF2D Function" dstnodeid="11" dstpinname="Input SF2D Function">
   </LINK>
   <LINK srcnodeid="9" srcpinname="Output" dstnodeid="10" dstpinname="Input 1 SDF">
   </LINK>
   <NODE systemname="CircleSDF (SF2D.Sources)" filename="%VVVV%\packs\FieldTrip\nodes\modules\SF2D\Sources\CircleSDF (SF2D.Sources).v4p" nodename="CircleSDF (SF2D.Sources)" componentmode="Hidden" id="8">
   <BOUNDS type="Node" left="2205" top="2055" width="100" height="100">
   </BOUNDS>
   <PIN pinname="Output" visible="1">
   </PIN>
   <PIN pinname="Position" slicecount="2" values="-0.28,-0.28">
   </PIN>
   <PIN pinname="Radius" slicecount="1" values="0.09">
   </PIN>
   </NODE>
   <LINK srcnodeid="8" srcpinname="Output" dstnodeid="10" dstpinname="Input 2 SDF">
   </LINK>
   <LINK srcnodeid="12" srcpinname="Output" dstnodeid="13" dstpinname="Input">
   </LINK>
   <NODE systemname="Renderer (DX11)" filename="%VVVV%\packs\dx11\nodes\plugins\base\VVVV.DX11.Nodes.dll" nodename="Renderer (DX11)" componentmode="InAWindow" id="7">
   <BOUNDS type="Node" left="15" top="6960" width="100" height="100">
   </BOUNDS>
   <BOUNDS type="Box" left="15" top="6960" width="6000" height="4500">
   </BOUNDS>
   <BOUNDS type="Window" left="3420" top="8925" width="3975" height="4215">
   </BOUNDS>
   <PIN pinname="Layers" visible="1">
   </PIN>
   </NODE>
   <NODE systemname="DrawSDF (SF2D.Usages DX11.Layer)" filename="%VVVV%\packs\FieldTrip\nodes\modules\Usages\Render\DrawSDF (DX11.Layer SF2D)\DrawSDF (SF2D.Usages DX11.Layer).v4p" nodename="DrawSDF (SF2D.Usages DX11.Layer)" componentmode="Hidden" id="6">
   <BOUNDS type="Node" left="120" top="5460" width="100" height="100">
   </BOUNDS>
   <PIN pinname="Function Resource Semantics" visible="1" slicecount="1" values="||">
   </PIN>
   <PIN pinname="SF2D Class" visible="1" slicecount="1" values="|&cr;&lf;#ifndef SDF_FXH&cr;&lf;#include &lt;packs\happy.fxh\sdf.fxh&gt;&cr;&lf;#endif&cr;&lf;&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;//&cr;&lf;//&tab;&tab;Circle Distance Function&cr;&lf;//&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;// This token will be replaced with function name via RegExpr: &quot;fCircleSDF_0_&quot;&cr;&lf;&cr;&lf;#ifndef SF2D&cr;&lf;// Paramaters&cr;&lf;StructuredBuffer&lt;float2&gt; fCircleSDF_0_pos : fCircleSDF_0_POS;&cr;&lf;StructuredBuffer&lt;float&gt; fCircleSDF_0_radius : fCircleSDF_0_RADIUS;&cr;&lf;&cr;&lf;uint circleCount;&cr;&lf;&cr;&lf;float fCircleSDF_0_ (float2 p)&cr;&lf;{&cr;&lf;&tab;float d = 999999;&cr;&lf;&tab;for(uint i; i&lt; circleCount; i++)&cr;&lf;&tab;{&cr;&lf;&tab;&tab;d = min (d, fCircle(p-fCircleSDF_0_pos[i], fCircleSDF_0_radius[i]));&lf;&tab;}&cr;&lf;&tab;return d;&cr;&lf;}&cr;&lf;&cr;&lf;&cr;&lf;#define SF2D fCircleSDF_0_&cr;&lf;#endif&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;|">
   </PIN>
   <PIN pinname="Layer" visible="1">
   </PIN>
   <PIN pinname="Technique Valid" visible="1">
   </PIN>
   <PIN pinname="Function Parameter Semantics" visible="1" slicecount="1" values="||">
   </PIN>
   <PIN pinname="SF2D Function" visible="1" slicecount="1" values="|&cr;&lf;#ifndef SDF_FXH&cr;&lf;#include &lt;packs\happy.fxh\sdf.fxh&gt;&cr;&lf;#endif&cr;&lf;&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;//&cr;&lf;//&tab;&tab;Circle Distance Function&cr;&lf;//&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;// This token will be replaced with function name via RegExpr: &quot;fBox2DSDF_0_&quot;&cr;&lf;&cr;&lf;#ifndef fDomainRepeatS2D_0_INPUT&cr;&lf;// Paramaters&cr;&lf;StructuredBuffer&lt;float2&gt; fBox2DSDF_0_pos : fBox2DSDF_0_POS;&cr;&lf;StructuredBuffer&lt;float2&gt; fBox2DSDF_0_size : fBox2DSDF_0_SIZE;&cr;&lf;&cr;&lf;int fBox2DSDF_0_count : fBox2DSDF_0_COUNT;&cr;&lf;&cr;&lf;float fBox2DSDF_0_ (float2 p)&cr;&lf;{&cr;&lf;&tab;float d = 999999;&cr;&lf;&tab;for(int i = 0; i&lt; fBox2DSDF_0_count; i++)&cr;&lf;&tab;{&cr;&lf;&tab;&tab;d = min (d, fBox(p-fBox2DSDF_0_pos[i], fBox2DSDF_0_size[i]));&lf;&tab;}&cr;&lf;&tab;return d;&cr;&lf;}&cr;&lf;&cr;&lf;&cr;&lf;#define fDomainRepeatS2D_0_INPUT fBox2DSDF_0_&cr;&lf;#endif&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;#ifndef CALC_FXH&cr;&lf;#include &lt;packs\happy.fxh\calc.fxh&gt;&cr;&lf;#endif&cr;&lf;&cr;&lf;#ifndef SDF_FXH&cr;&lf;#include &lt;packs\happy.fxh\sdf.fxh&gt;&cr;&lf;#endif&cr;&lf;&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;//&cr;&lf;//&tab;&tab;2D Domain Wraping Function&cr;&lf;//&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;// This token will be replaced with function name via RegExpr: &quot;fDomainRepeatS2D_0_&quot;&cr;&lf;#ifndef SF2D&cr;&lf;&cr;&lf;// Input function placeholder&cr;&lf;#ifndef fDomainRepeatS2D_0_INPUT&cr;&lf;#define fDomainRepeatS2D_0_INPUT placeHolderS2&cr;&lf;#endif&cr;&lf;&cr;&lf;&cr;&lf;// Paramaters&cr;&lf;float2 fDomainRepeatS2D_0_size : fDomainRepeatS2D_0_SIZE = 1;&cr;&lf;&cr;&lf;float fDomainRepeatS2D_0_ (float2 p)&cr;&lf;{&cr;&lf;&tab;p = pMod2(p, fDomainRepeatS2D_0_size);&cr;&lf;&tab;return fDomainRepeatS2D_0_INPUT(p);&cr;&lf;}&cr;&lf;&cr;&lf;#define SF2D fDomainRepeatS2D_0_&cr;&lf;#endif&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;|">
   </PIN>
   <PIN pinname="Color" slicecount="1" values="|0.11215,1.00000,0.63778,1.00000|">
   </PIN>
   <PIN pinname="Input SF2D Function" visible="1">
   </PIN>
   <PIN pinname="Compiled" visible="1">
   </PIN>
   <PIN pinname="Input" visible="1" slicecount="1" values="||">
   </PIN>
   </NODE>
   <NODE nodename="IOBox (Node)" componentmode="InABox" id="5">
   <BOUNDS type="Box" left="1080" top="3555" width="795" height="240">
   </BOUNDS>
   <BOUNDS type="Node" left="1080" top="3555" width="0" height="0">
   </BOUNDS>
   <PIN pinname="Output Node" visible="1">
   </PIN>
   <PIN pinname="Input Node" visible="1" slicecount="1" values="||">
   </PIN>
   </NODE>
   <LINK srcnodeid="5" srcpinname="Output Node" dstnodeid="12" dstpinname="Input">
   </LINK>
   <LINK srcnodeid="5" srcpinname="Output Node" dstnodeid="6" dstpinname="Input">
   </LINK>
   <LINK srcnodeid="6" srcpinname="Layer" dstnodeid="7" dstpinname="Layers">
   </LINK>
   <NODE nodename="IOBox (Value Advanced)" componentmode="InABox" id="4">
   <BOUNDS type="Box" left="1410" top="5865" width="480" height="480">
   </BOUNDS>
   <BOUNDS type="Node" left="1410" top="5865" width="0" height="0">
   </BOUNDS>
   <PIN pinname="Units" slicecount="1" values="||">
   </PIN>
   <PIN pinname="Precision" slicecount="1" values="4">
   </PIN>
   <PIN pinname="Value Type" slicecount="1" values="Boolean">
   </PIN>
   <PIN pinname="Behavior" slicecount="1" values="Toggle">
   </PIN>
   <PIN pinname="Descriptive Name" slicecount="1" values="Compiled">
   </PIN>
   </NODE>
   <LINK srcnodeid="6" srcpinname="Compiled" dstnodeid="4" dstpinname="Y Input Value">
   </LINK>
   <LINK srcnodeid="11" srcpinname="Output" dstnodeid="5" dstpinname="Input Node">
   </LINK>
   <PACK Name="dx11" Version="1.0.2">
   </PACK>
   <PACK Name="vvvv-Message" Version="2.9.0">
   </PACK>
   <PACK Name="vvvv-ZeroMQ" Version="0.5.3">
   </PACK>
   <PACK Name="addonpack" Version="35.0.0">
   </PACK>
   </PATCH>